import type { Action, AnyAction, Dispatch } from 'redux';
import type { ThunkDispatch } from 'redux-thunk';
import type { RegionMetadata, State, View, ViewAuthoringAction, ViewMetadata } from '../../common.types';
export declare const SaveStatus: {
    IDLE: string;
    SAVING: string;
    SAVED: string;
    FAILED: string;
};
export declare const SavableActions: string[];
export interface SaveViewParamsBaseProps {
    viewMetadata: string;
    viewName: ViewMetadata['name'];
    viewClass: View['viewClass'];
    viewLabel: View['viewLabel'];
}
export interface SaveViewParams extends SaveViewParamsBaseProps {
    isViewEditing: 'true';
    isToplevelViewSaved?: boolean;
    isInWorkClass: boolean;
    overrideView?: boolean;
    action: string;
    viewReferenceList?: ViewMetadata['config']['referenceList'];
    autoGenerated?: boolean;
    viewNamespaceInfo: View['viewNamespaceInfo'];
    saveOtherView?: SaveViewParamsBaseProps;
}
export declare const DATA_PREVIEW_TABS_INF: {
    type: string;
    config: {
        label: string;
        name: string;
    };
}[];
export declare const CASE_PREVIEW_TABS_INF: ({
    type: string;
    config: {
        label: string;
        name: string;
    };
} | {
    type: string;
    config: {
        name: string;
        inheritedProps: {
            prop: string;
            value: string;
        }[];
    };
})[];
export declare const CASE_PREVIEW_TABS_LP: {
    type: string;
    config: {
        label: string;
        name: string;
    };
}[];
export declare function syncPreviewTabs(previewTabsRegion: RegionMetadata, detailsTabsRegion: RegionMetadata, syncTabsFromDetails: boolean, isInWorkClass: boolean): z.infer<any>;
export declare const triggerSaveSideEffects: ({ savedView, saveSideEffectPromiseResolve, }: {
    savedView: SaveViewParams;
    saveSideEffectPromiseResolve: typeof Promise.resolve;
}) => void;
export type PostSaveCallback = (requestParams?: SaveViewParams) => void;
export declare function saveView(state: State, dispatch: Dispatch<ViewAuthoringAction>, action: ViewAuthoringAction, saveViewResolve?: typeof Promise.resolve): any;
export interface SaveArgs {
    state: State;
    action: AnyAction;
    saveViewResolve?: typeof Promise.resolve;
}
export declare const saveViewThunk: (saveArgs: SaveArgs) => (dispatch: ThunkDispatch<State, void, Action<any>>) => any;
/**
 * A middleware that handles the side-effect of saving.
 */
export default function saverMiddleware({ dispatch, getState, }: {
    dispatch: ThunkDispatch<State, void, Action>;
    getState: () => State;
}): (next: ThunkDispatch<State, void, Action<any>>) => (action: ViewAuthoringAction) => any;
//# sourceMappingURL=save.d.ts.map