import { z } from 'zod';
import type { AnyAction } from 'redux';
import type { ComponentDefinition, TemplateDefinition } from './component-definition.types';
import type { ContentPicker } from './components/Formats/Formats.types';
import type { PostSaveCallback } from './redux/middleware/save';
import type { ConfigurationProps } from './components/Configuration';
declare const baseMetadataObjectSchema: any;
export type MetadataObject = z.infer<typeof baseMetadataObjectSchema> & {
    children?: MetadataObject[];
};
export declare const ZMetadataObject: z.ZodType<MetadataObject>;
export declare const ZViewMetadata: any;
export type ViewMetadata = z.infer<typeof ZViewMetadata>;
export declare const ZViewReferenceMetadata: any;
export type ViewReferenceMetadata = z.infer<typeof ZViewReferenceMetadata>;
export declare const ZDeferLoadMetadata: any;
export type DeferLoadMetadata = z.infer<typeof ZDeferLoadMetadata>;
export declare const ZRegionMetadata: any;
export type RegionMetadata = z.infer<typeof ZRegionMetadata>;
export declare const ZViewMetadataWithRegions: any;
export type ViewMetadataWithRegions = z.infer<typeof ZViewMetadataWithRegions>;
export interface Application {
    name: string;
    isolationID: string;
    ID: string;
    namespace: string;
    version: string;
}
interface DataPageParameterDetails {
    name: string;
    dataType: string;
    description: string;
    required: boolean;
    defaultValue: string;
}
export interface DataPageDetails {
    name: string;
    className: string;
    parameters?: DataPageParameterDetails[];
    isSearchable: boolean;
}
export interface DataSource {
    application: Application;
    class: string;
    isCaseTypeWorkObject: boolean;
    isSearchable: boolean;
    isWorkObject: boolean;
    label: string;
    name: string;
    pageType: string;
    parameters: DataPageParameterDetails[];
    reusability: string;
    classNamespace?: string;
}
export interface ConditionBuilderFields {
    id: string;
    primary: string;
    type: string;
}
export declare const ZFieldRecord: any;
export type FieldRecord = z.infer<typeof ZFieldRecord>;
declare const ZViewType: any;
export type ViewType = z.infer<typeof ZViewType>;
declare const ZViewRecord: any;
export type ViewRecord = z.infer<typeof ZViewRecord>;
declare const ZInsightRecord: any;
export type InsightRecord = z.infer<typeof ZInsightRecord>;
export declare const ZRelevantRecords: any;
export type RelevantRecords = z.infer<typeof ZRelevantRecords>;
export interface DataSources {
    Sources: DataSource[];
}
export interface View {
    conditionBuilderFields: ConditionBuilderFields[];
    dataSources: {
        Sources: DataSource[];
    };
    displaySharedViewMessage: boolean;
    isInWorkClass: boolean;
    recordLabels: {
        views: Record<string, string> | Record<string, never>;
        properties: Record<string, string> | Record<string, never>;
    };
    relevantRecords: RelevantRecords;
    specializeOnSave: boolean;
    templateId: string;
    viewClass: string;
    viewLabel: string;
    viewMetadata: ViewMetadata;
    viewNamespaceInfo?: {
        viewClassNamespace: string;
        viewNamespace: string;
    };
    viewType: string;
    authoringType: 'list' | 'landing' | 'case' | 'tab';
    /** Set to true if the view is linked to an Optional action in Infinity. Used to determine dropdown options for view instructions */
    isViewForAction?: boolean;
    autoGenerated?: boolean;
    /** When user has drilled into a view (switched context), this is set to track the path to the item */
    activeItemPath?: string;
}
export interface Template {
    templateDefinition: TemplateDefinition;
}
export interface ViewNamespaceInfo {
    viewNamespace: string;
    viewClassNamespace: string;
}
export interface State {
    allowCreateNewFields?: boolean;
    /** Defaults to 200ms */
    debounceSaveDelay?: number;
    error?: Error;
    isHybridApp?: boolean;
    isInRuleClass?: boolean;
    isStandaloneEditView?: boolean;
    /** Turn off auto-save. Used for runtime editing of Dashboards (Business Intelligence - Team Pizza Planet) */
    noAPISave?: boolean;
    /** The root element to mount the view preview to */
    previewRoot?: HTMLElement;
    saveStatus?: string;
    postSaveCallback?: PostSaveCallback;
    submitButtonHandler?: unknown;
    templateOverrides?: unknown;
    viewAuthoringContext?: 'case-type' | 'data-type' | 'rule-type' | 'page';
    classes: {
        /**
         * The class of the object for which views are being authored. N/A for landing pages (refer to pageClass). This is
         * used for all object types (case, data, rule).
         */
        caseClass?: string;
        /** The class where landing pages are saved to */
        pageClass?: string;
    };
    views: {
        allIds: string[];
        byId: Record<string, View>;
    };
    viewsStack: string[];
    templates: {
        allIds: string[];
        byId: Record<string, Template>;
    };
    numberOfOngoingAsyncSaves?: number;
    features?: ConfigurationProps['features'];
    showInsightAuthoring?: (info: {
        classID: string;
        defaultListDataView?: string;
        backLabel: string;
        viewType: string;
    }) => void;
    modifyPanel?: {
        definition: ComponentDefinition;
        displayAsOptions?: string[];
        type: string;
        referenceViewTemplate?: TemplateDefinition['name'];
        referenceViewTemplateSubtype?: TemplateDefinition['subtype'];
        referenedViewType?: View['viewType'];
        /** Class of the records to use for conditions? */
        conditionsContext?: string;
        /** The class where the field being configured lives */
        fieldClass?: string;
        /** The field record data for the field being configured */
        record: FieldRecord;
        /** The instructions content of a field group */
        paragraph?: {
            id: string;
            content: string;
        };
        /** Add subtype from ComponentDefinition used for custom components */
        fieldtype?: string;
        state: Record<string, any>;
        /** Property panel overrides driven by the CONTENTPICKER format */
        propertyPanel?: ContentPicker['propertyPanel'];
    };
}
export interface ViewAuthoringAction extends AnyAction {
    postSaveCallback?: PostSaveCallback;
    configureDialogIsOpen?: boolean;
}
export interface ViewResponse {
    data: {
        caseInfo: {
            ID: string;
            caseTypeID: string;
            content: any;
            assignments: any;
            stages: any;
        };
        [key: string]: any;
    };
    uiResources: {
        resources: {
            fields: Record<string, any>;
            datapages: Record<string, any>;
        };
        views: Record<string, ViewMetadata[]>;
        components: string[];
        root: ViewReferenceMetadata;
        context_data: unknown;
    };
}
export {};
//# sourceMappingURL=common.types.d.ts.map